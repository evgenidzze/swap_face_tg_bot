from random import random, choice

import cv2
import numpy as np
from aiogram.types import BufferedInputFile, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from insightface.app import FaceAnalysis

from io import BytesIO

from start_bot import swapper, app, bot, hero_faces


def analyze_faces(face_analysis: FaceAnalysis, img_data: np.ndarray, det_size=(640, 640)):
    detection_sizes = [None] + [(size, size) for size in range(640, 256, -64)] + [(256, 256)]

    for size in detection_sizes:
        print(size)
        faces = face_analysis.get(img_data, det_size=size)
        if len(faces) > 0:
            return faces

    return []


async def get_swapped_photo(file_id, hero_name):
    photo_bytes = BytesIO()
    await bot.download(file=file_id, destination=photo_bytes)
    photo_bytes.seek(0)

    np_arr = np.frombuffer(photo_bytes.read(), np.uint8)
    user_img = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
    faces = analyze_faces(app, user_img)

    if not faces:
        return False, None

    user_face = faces[0]

    # Randomly select a hero
    hero_path = f'static/images/{hero_name}.jpg'
    hero_image = cv2.imread(hero_path)
    hero_face = hero_faces[hero_name]

    # Swap faces
    swapped = swapper.get(hero_image.copy(), hero_face, user_face, paste_back=True)

    _, buffer = cv2.imencode('.jpg', swapped)
    image_io = BytesIO(buffer.tobytes())
    image_io.seek(0)
    input_file = BufferedInputFile(file=image_io.getvalue(), filename="swapped.jpg")
    hero_name = hero_name.replace('_', ' ').title()
    return input_file, hero_name


async def generate_slots_kb():
    kb = InlineKeyboardBuilder()
    for hero_name in hero_faces.keys():
        kb.button(text=hero_name.replace('_', ' ').title(), callback_data=f"{hero_name}")
    kb.adjust(1)
    return kb.as_markup()


async def random_text(slot_name):
    formatted_slot_name = slot_name.replace('_', ' ').title()
    texts = [
        f"üòé <b>–ù—É —Å–ª—É—à–∞–π, —Ç—ã —Ä–µ–∞–ª—å–Ω–æ –∫—Ä—É—Ç–æ —Å–º–æ—Ç—Ä–∏—à—å—Å—è –≤ —ç—Ç–æ–º –æ–±—Ä–∞–∑–µ!</b>\n<i>–ê —Ö–æ—á–µ—à—å –∑–∞ –Ω–µ–≥–æ –∏ –ø–æ–∏–≥—Ä–∞—Ç—å?</i>\n<b>–ó–∞—Ö–æ–¥–∏ –≤ {formatted_slot_name} ‚Äî –∫–∞–π—Ñ–∞–Ω—ë–º –≤–º–µ—Å—Ç–µ!</b>",

        f"üé≠ <b>–í–æ—Ç —ç—Ç–æ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ!</b>\n<i>–ï—Å–ª–∏ —Ç–µ–±–µ, –∫–∞–∫ –∏ –Ω–∞–º, –ø–æ –∫–∞–π—Ñ—É ‚Äî –∂–º–∏ –∏ –∑–∞–≥–ª—è–Ω–∏ –≤ {formatted_slot_name}</i>",

        f"‚ö° <b>–ö–∞–∂–µ—Ç—Å—è, —Ç–≤–æ–π –≥–µ—Ä–æ–π —É–∂–µ –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ.</b>\n<i>–ù–µ —Ç–æ—Ä–º–æ–∑–∏ ‚Äî –∑–∞—Ö–æ–¥–∏ –≤ {formatted_slot_name} –∏ —Å–æ—Ä–≤–∏ –∫—É—à!</i>",

        f"üé≤ <b>–ú—ã –±—ã –∏ —Å–∞–º–∏ –∑–∞—à–ª–∏ –≤ –∏–≥—Ä—É —Å —Ç–∞–∫–∏–º –ª–∏—Ü–æ–º!</b>\n<i>–¢–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∞—Ç—å ‚Äî {formatted_slot_name} –∏ –≤–æ–π—Ç–∏ –≤ –∏–≥—Ä—É</i>",

        f"‚≠ê <b>–ù—É —Ç—ã –∏ –∫—Ä–∞—Å–∞–≤—á–∏–∫. –ì–µ—Ä–æ–π –∫–∞–∫ —Å –∞—Ñ–∏—à–∏.</b>\n<i>–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ —Å—ã–≥—Ä–∞—Ç—å –∑–∞ –Ω–µ–≥–æ –≤ {formatted_slot_name}</i>",

        f"üéØ <b>–ö–∞–∂–µ—Ç—Å—è, –∫—Ç–æ-—Ç–æ –Ω–∞—à—ë–ª —Å–≤–æ–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.</b>\n<i>–¢–∞–∫ –º–æ–∂–µ—Ç, –∏ –≤ –∏–≥—Ä—É –∑–∞ –Ω–µ–≥–æ? {formatted_slot_name} —Ç–µ–±—è —É–∂–µ –∂–¥—ë—Ç!</i>",

        f"üî• –ë–£–ú! –ê –≤–æ—Ç –∏ —Ç—ã! –£–∑–Ω–∞–µ—à—å?! - –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –∏–≥—Ä—ã {formatted_slot_name} –í—ã–≥–ª—è–¥–∏—à—å –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!",

        f"üéØ –ò –ø–æ —Ç—Ä–∞–¥–∏—Ü–∏–∏, –¥–∞—Ä–∏–º –±–æ–Ω—É—Å –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã\n\n10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏–π –≤ –∏–≥—Ä–µ {formatted_slot_name}\n\n–ñ–º–∏ –∏ –∑–∞–±–∏—Ä–∞–π"
    ]
    return choice(texts)


async def get_rega(user_id):
    return f"https://slottica-bonus.com/registration/c=02414WCeSw_RP0e0a462d27365a40f&utm_source=rafautodep&utm_campaign=0&utm_content={user_id}&utm_term=AZ"


async def create_rega_btn(user_id, text):
    rega = await get_rega(user_id)
    return InlineKeyboardButton(text=text, url=rega)