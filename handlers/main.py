import random

from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards import use_avatar_kb
from start_bot import bot, loading_gif_buffered, hero_faces
from utils import get_swapped_photo, generate_slots_kb

from aiogram import types, F, Router

router = Router()

class FSMClient(StatesGroup):
    user_photo = State()
    slot_name = State()


@router.message(Command('start'))
async def start_handler(message: types.Message):
    await message.reply(
        "üé≠ CasinoFace - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–±—è –≤ –≥–µ—Ä–æ—è –∫—É–ª—å—Ç–æ–≤—ã—Ö –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä!\n\n"
        "üëÄ –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫–µ–º –±—ã —Ç—ã –±—ã–ª –≤ –º–∏—Ä–µ —Å—Ç–∞–≤–æ–∫ –∏ –±–æ–ª—å—à–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π?\n\n"
        "üéÅ –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ - –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–π –æ–±—Ä–∞–∑ –∏ –ë–û–ù–£–° –Ω–∞ –∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ç—ã –∏–¥–µ–∞–ª—å–Ω–æ –≤–ø–∏—à–µ—à—å—Å—è!\n\n"
        "‚¨áÔ∏è –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –ª–∏–±–æ —Ä–∞–∑—Ä–µ—à–∏ –±–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–≤–æ—é –∞–≤–∞—Ç–∞—Ä–∫—É - –∏ —É–∑–Ω–∞–π, –Ω–∞ –∫–∞–∫–æ–≥–æ –≥–µ—Ä–æ—è —Å–ª–æ—Ç–∞ —Ç—ã –ø–æ—Ö–æ–∂ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ)\n\n"
        "–£–±–µ–¥–∏—Å—å, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        , reply_markup=use_avatar_kb.as_markup())


@router.callback_query(F.data == 'use_avatar')
async def use_avatar_handler(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer_animation(animation=loading_gif_buffered, caption="–ó–∞–≥—Ä—É–∂–∞—é —Ç–≤–æ—é –∞–≤–∞—Ç–∞—Ä–∫—É...")
    photos = await bot.get_user_profile_photos(user_id=callback.from_user.id)
    if photos.total_count:
        hero_name = random.choice(list(hero_faces.keys()))

        input_file, slot_name = await get_swapped_photo(photos.photos[0], hero_name)
        if input_file:
            await callback.message.answer_photo(photo=input_file,
                                                caption=f"üî• –ë–£–ú! –ê –≤–æ—Ç –∏ —Ç—ã! –£–∑–Ω–∞–µ—à—å?! - –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –∏–≥—Ä—ã {slot_name} –í—ã–≥–ª—è–¥–∏—à—å –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!")
        else:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à—É –∞–≤–∞—Ç–∞—Ä–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            return
    else:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        return


@router.callback_query(F.data == 'get_free_spins')
async def get_free_spins_handler(callback: types.CallbackQuery):
    await callback.answer()
    kb = InlineKeyboardBuilder()
    kb.button(text='–ë–û–ù–£–° 200%  ', callback_data='get_bonus')
    await callback.message.answer("–ò –∫—Å—Ç–∞—Ç–∏, –ø–æ–∫–∞ —Ç—ã –∑–¥–µ—Å—å, —Å–ø–µ—à—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–≤–µ—Ç–æ–º..\n\n"
                                  "–ö–∞–∑–∏–Ω–æ SLOTTICA, –∫—Ä–æ–º–µ —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤, –î–ê–†–ò–¢ –í–°–ï–ú –ù–û–í–´–ò –ò–ì–†–û–ö–ê–ú +200% –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!\n\n"
                                  "–ù–µ –∑–∞–±—É–¥—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ–Ω—É—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                                  , reply_markup=kb.as_markup())


@router.callback_query(F.data == 'get_bonus')
async def get_bonus_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    kb = await generate_slots_kb()
    await state.set_state(FSMClient.slot_name)
    await callback.message.answer(
        "üëë –•–æ—á–µ—à—å –ø—Ä–∏–º–µ—Ä–∏—Ç—å –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–∑—ã?\n\n"
        "–ö–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ –ø–µ—Ä–µ–≤–æ–ø–ª–æ—â–µ–Ω–∏–µ = –Ω–æ–≤—ã–π –±–æ–Ω—É—Å!\n\n"
        "üëá –í—ã–±–µ—Ä–∏ —Å–ª–æ—Ç"
        , reply_markup=kb)


@router.callback_query(FSMClient.slot_name)
async def slot_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(slot_name=callback.data)
    await state.set_state(FSMClient.user_photo)
    photos = await bot.get_user_profile_photos(user_id=callback.from_user.id)
    if photos.total_count:
        input_file, slot_name = await get_swapped_photo(photos.photos[0], callback.data)
        if input_file:
            await callback.message.answer_photo(photo=input_file,
                                                caption=f"üî• –ë–£–ú! –ê –≤–æ—Ç –∏ —Ç—ã! –£–∑–Ω–∞–µ—à—å?! - –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –∏–≥—Ä—ã {slot_name} –í—ã–≥–ª—è–¥–∏—à—å –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!")
        else:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à—É –∞–≤–∞—Ç–∞—Ä–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            return
    else:
        await callback.message.answer(
            f"üî• –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n\n"
            f"–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ—Ä–∏—Ç—å –æ–±—Ä–∞–∑ –∏–∑ —Å–ª–æ—Ç–∞ {callback.data.replace('_', ' ').title()}\n\n")


@router.message(FSMClient.user_photo)
async def user_photo_handler(message: types.Message, state: FSMContext):
    await message.answer_animation(animation=loading_gif_buffered, caption="–ó–∞–≥—Ä—É–∂–∞—é —Ç–≤–æ—é –∞–≤–∞—Ç–∞—Ä–∫—É...")
    data = await state.get_data()
    slot_name = data.get('slot_name')
    input_file, slot_name = await get_swapped_photo(message.photo, slot_name)
    if input_file:
        kb = InlineKeyboardBuilder()
        kb.button(text='–ó–ê–ë–†–ê–¢–¨ –§–†–ò–°–ü–ò–ù–´', callback_data='get_free_spins')
        kb.button(text='–ü–û–ü–†–û–ë–û–í–ê–¢–¨ –ï–©–ï', callback_data='get_bonus')
        await message.answer_photo(photo=input_file,
                                   caption=f"üî• –ë–£–ú! –ê –≤–æ—Ç –∏ —Ç—ã! –£–∑–Ω–∞–µ—à—å?! - –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –∏–≥—Ä—ã {slot_name.replace('_', ' ').title()} –í—ã–≥–ª—è–¥–∏—à—å –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!")
        await message.answer("üéØ –ò –ø–æ —Ç—Ä–∞–¥–∏—Ü–∏–∏, –¥–∞—Ä–∏–º –±–æ–Ω—É—Å –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã\n\n"
                             f"10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏–π –≤ –∏–≥—Ä–µ {slot_name.replace('_', ' ').title()}\n\n"
                             "üëá –ñ–º–∏ –∏ –∑–∞–±–∏—Ä–∞–π")
        await state.clear()
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ª–∏—Ü–æ –Ω–∞ —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")


@router.message(F.photo)
async def photo_handler(message: types.Message):
    hero_name = random.choice(list(hero_faces.keys()))

    input_file, slot_name = await get_swapped_photo(message.photo, hero_name)
    if input_file:
        kb = InlineKeyboardBuilder()
        kb.button(text='–ó–ê–ë–†–ê–¢–¨ –§–†–ò–°–ü–ò–ù–´', callback_data='get_free_spins')
        await message.answer_photo(photo=input_file,
                                   caption=f"üî• –ë–£–ú! –ê –≤–æ—Ç –∏ —Ç—ã! –£–∑–Ω–∞–µ—à—å?! - –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –∏–≥—Ä—ã {slot_name} –í—ã–≥–ª—è–¥–∏—à—å –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!\n\n"
                                           f"üéØ –ö–∞–∫ –∏ –æ–±–µ—â–∞–ª–∏ - –¥–∞—Ä–∏–º –±–æ–Ω—É—Å –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞\n\n"
                                           f"10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏–π –≤ –∏–≥—Ä–µ [–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞]\n\n"
                                           f"–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ –∏–≥—Ä–æ–∫ #45701 –ø–æ–π–º–∞–ª –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ö882\n\n"
                                           f"üî• –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–µ–≤–∑–æ–π—Ç–∏ —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ê —Å –±–æ–Ω—É—Å–æ–º —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ä–∞!\n\n"
                                           f"üëá –ñ–º–∏ –∏ –∑–∞–±–∏—Ä–∞–π", reply_markup=kb.as_markup())
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ª–∏—Ü–æ –Ω–∞ —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")


