import random
import asyncio
from typing import Union
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import types, F, Router

from keyboards import use_avatar_kb
from start_bot import bot, loading_gif_buffered, hero_faces
from utils import get_swapped_photo, generate_slots_kb, random_text, get_rega, create_rega_btn

router = Router()


class FSMClient(StatesGroup):
    user_photo = State()
    slot_name = State()


@router.message(CommandStart())
@router.message(CommandStart(deep_link=True))
async def start_handler(message: types.Message, command: CommandObject, state: FSMContext):
    # Check for deep link parameter
    start_param = command.args
    if start_param:
        if start_param == 'help':
            from handlers.help import help_handler
            await help_handler(message)
            return
        elif start_param == 'bonus':
            from handlers.bonus import bonus_handler
            await bonus_handler(message)
            return
        elif start_param == 'generate':
            await get_bonus_handler(message, state)
            return

    # If no deep link or unknown command, show regular start message
    await message.reply(
        "üé≠ <b>CasinoFace ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–±—è –≤ –≥–µ—Ä–æ—è –∫—É–ª—å—Ç–æ–≤—ã—Ö –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä!</b>\n\n"
        "üëÄ <i>–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫–µ–º –±—ã —Ç—ã –±—ã–ª –≤ –º–∏—Ä–µ —Å—Ç–∞–≤–æ–∫ –∏ –±–æ–ª—å—à–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π?</i>\n\n"
        "üéÅ <b>–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ ‚Äî –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–π –æ–±—Ä–∞–∑ –∏ –ë–û–ù–£–° –Ω–∞ –∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ç—ã –∏–¥–µ–∞–ª—å–Ω–æ –≤–ø–∏—à–µ—à—å—Å—è!</b>\n\n"
        "‚¨áÔ∏è <i>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –ª–∏–±–æ —Ä–∞–∑—Ä–µ—à–∏ –±–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–≤–æ—é –∞–≤–∞—Ç–∞—Ä–∫—É ‚Äî –∏ —É–∑–Ω–∞–π, –Ω–∞ –∫–∞–∫–æ–≥–æ –≥–µ—Ä–æ—è —Å–ª–æ—Ç–∞ —Ç—ã –ø–æ—Ö–æ–∂ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ!</i>\n\n"
        "‚ö°Ô∏è <b>–£–±–µ–¥–∏—Å—å, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>"
        , parse_mode="HTML"
        , reply_markup=use_avatar_kb.as_markup())


@router.callback_query(FSMClient.slot_name)
async def slot_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(slot_name=callback.data)
    await state.set_state(FSMClient.user_photo)
    photos = await bot.get_user_profile_photos(user_id=callback.from_user.id)
    if photos.total_count:
        input_file, slot_name = await get_swapped_photo(photos.photos[0][-1].file_id, callback.data)
        if input_file:
            await callback.message.answer_photo(photo=input_file,
                                                caption=f"üî• –ë–£–ú! –ê –≤–æ—Ç –∏ —Ç—ã! –£–∑–Ω–∞–µ—à—å?! - –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –∏–≥—Ä—ã {slot_name} –í—ã–≥–ª—è–¥–∏—à—å –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!")
        else:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à—É –∞–≤–∞—Ç–∞—Ä–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            return
    else:
        await callback.message.answer(
            f"üî• –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n\n"
            f"–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ—Ä–∏—Ç—å –æ–±—Ä–∞–∑ –∏–∑ —Å–ª–æ—Ç–∞ {callback.data.replace('_', ' ').title()}\n\n")


@router.message(FSMClient.user_photo)
async def user_photo_handler(message: types.Message, state: FSMContext):
    await message.answer_animation(animation=loading_gif_buffered, caption="–ó–∞–≥—Ä—É–∂–∞—é —Ç–≤–æ—é –∞–≤–∞—Ç–∞—Ä–∫—É...")
    data = await state.get_data()
    slot_name = data.get('slot_name')
    input_file, slot_name = await get_swapped_photo(message.photo[-1].file_id, slot_name)
    if input_file:
        kb = InlineKeyboardBuilder()
        kb.button(text='–ó–ê–ë–†–ê–¢–¨ –§–†–ò–°–ü–ò–ù–´', callback_data='get_free_spins')
        kb.button(text='–ü–û–ü–†–û–ë–û–í–ê–¢–¨ –ï–©–ï', callback_data='get_bonus')
        await message.answer_photo(photo=input_file,
                                   caption=f"üî• –ë–£–ú! –ê –≤–æ—Ç –∏ —Ç—ã! –£–∑–Ω–∞–µ—à—å?! - –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –∏–≥—Ä—ã {slot_name.replace('_', ' ').title()} –í—ã–≥–ª—è–¥–∏—à—å –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!")
        await message.answer("üéØ –ò –ø–æ —Ç—Ä–∞–¥–∏—Ü–∏–∏, –¥–∞—Ä–∏–º –±–æ–Ω—É—Å –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã\n\n"
                             f"10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏–π –≤ –∏–≥—Ä–µ {slot_name.replace('_', ' ').title()}\n\n"
                             "üëá –ñ–º–∏ –∏ –∑–∞–±–∏—Ä–∞–π", reply_markup=kb.as_markup())
        await state.clear()
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ª–∏—Ü–æ –Ω–∞ —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")


@router.callback_query(F.data == 'use_avatar')
@router.message(F.photo)
async def use_avatar_handler(callback: types.CallbackQuery | types.Message, state: FSMContext):
    await bot.send_animation(chat_id=callback.from_user.id,
                             animation=loading_gif_buffered,
                             caption=(
                                 "‚öôÔ∏è <b>–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–≤–æ–µ –∞–ª—å—Ç–µ—Ä-—ç–≥–æ...</b>\n\n"
                                 "‚è≥ <i>–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –í —ç—Ç–æ –≤—Ä–µ–º—è —Ç–≤–æ—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–ø–ª–µ—Ç–∞–µ—Ç—Å—è —Å –∞–∑–∞—Ä—Ç–æ–º...</i>"
                             )
                             )

    no_avatar_text = (
        "‚ùó <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ —Ñ–æ—Ç–æ</b>\n\n"
        "üì∏ <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ª–∏—Ü–æ–º, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.</i>"
    )

    if isinstance(callback, types.CallbackQuery):
        await callback.answer()
        photos = await bot.get_user_profile_photos(user_id=callback.from_user.id)
        file_id = photos.photos[0][-1].file_id if photos.total_count else None
    else:
        photos = callback.photo
        file_id = photos[-1]

    if file_id:
        hero_name = random.choice(list(hero_faces.keys()))
        input_file, slot_name = await get_swapped_photo(file_id, hero_name)

        if input_file:
            text = await random_text(slot_name)
            btn = await create_rega_btn(callback.from_user.id, text="–ò–ì–†–ê–¢–¨!")
            await bot.send_photo(chat_id=callback.from_user.id,
                                 photo=input_file,
                                 caption=text,
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=[[btn]])
                                 )

            # Only send delayed registration message if it's a callback query (not a direct photo)
            if isinstance(callback, types.CallbackQuery):
                btn = await create_rega_btn(callback.from_user.id, text="–ò–ì–†–ê–¢–¨!")
                kb = InlineKeyboardMarkup(inline_keyboard=[[btn]])
                asyncio.create_task(send_delayed_message(
                    callback.from_user.id,
                    delay=20,
                    message_text="üí¨ <b>–ò –∫—Å—Ç–∞—Ç–∏, –ø–æ–∫–∞ —Ç—ã –∑–¥–µ—Å—å, —Å–ø–µ—à—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–≤–µ—Ç–æ–º..</b>\n\n"
                                 "üé∞ <b>–ö–∞–∑–∏–Ω–æ SLOTTICA, –∫—Ä–æ–º–µ —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤, –î–ê–†–ò–¢ –í–°–ï–ú –ù–û–í–´–ú –ò–ì–†–û–ö–ê–ú +200% –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!</b>\n\n"
                                 "‚ö°Ô∏è <i>–ù–µ –∑–∞–±—É–¥—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ–Ω—É—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</i>",
                    kb=kb
                ))

            kb = InlineKeyboardBuilder()
            btn = await create_rega_btn(callback.from_user.id, text="üé∞ –ó–ê–ë–†–ê–¢–¨ –§–†–ò–°–ü–ò–ù–´ üé∞ (—Ä–µ–≥–∞)")
            kb.add(btn)
            kb.button(text='üëª –ë–û–õ–¨–®–ï –ë–û–ù–£–°–û–í –¢–£–¢ üëª', callback_data='bonus')
            kb.adjust(1)
            asyncio.create_task(send_delayed_message(callback.from_user.id, delay=3,
                                                     message_text="<b>–ö–∞–∫ –∏ –æ–±–µ—â–∞–ª–∏ ‚Äî –¥–∞—Ä–∏–º –±–æ–Ω—É—Å –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞</b>\n\n"
                                                                  "üéÅ <b>10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏–π –≤ –∏–≥—Ä–µ [–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞]</b>\n\n"
                                                                  "üèÜ <i>–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ –∏–≥—Ä–æ–∫ #45701 –ø–æ–π–º–∞–ª –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ö882</i>\n\n"
                                                                  "<b>–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–µ–≤–∑–æ–π—Ç–∏ —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b> <i>–ê —Å –±–æ–Ω—É—Å–æ–º —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ä–∞!</i>\n\n"
                                                                  "üëá üëá <b>–ñ–º–∏ –∏ –∑–∞–±–∏—Ä–∞–π</b>",
                                                     kb=kb.as_markup()))
            await asyncio.sleep(8)
            await get_bonus_handler(callback, state=state)
            return

    # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ñ–æ—Ç–æ –∞–±–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    await callback.message.answer(no_avatar_text)


@router.callback_query(F.data == 'get_free_spins')
async def get_free_spins_handler(callback: types.CallbackQuery):
    await callback.answer()
    kb = InlineKeyboardBuilder()
    kb.button(text='–ë–û–ù–£–° 200%  ', callback_data='get_bonus')
    await callback.message.answer("–ò –∫—Å—Ç–∞—Ç–∏, –ø–æ–∫–∞ —Ç—ã –∑–¥–µ—Å—å, —Å–ø–µ—à—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–≤–µ—Ç–æ–º..\n\n"
                                  "–ö–∞–∑–∏–Ω–æ SLOTTICA, –∫—Ä–æ–º–µ —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤, –î–ê–†–ò–¢ –í–°–ï–ú –ù–û–í–´–ò –ò–ì–†–û–ö–ê–ú +200% –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!\n\n"
                                  "–ù–µ –∑–∞–±—É–¥—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ–Ω—É—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                                  , reply_markup=kb.as_markup())


@router.callback_query(F.data == 'get_bonus')
@router.message(Command('generate'))
async def get_bonus_handler(event: Union[types.CallbackQuery, types.Message], state: FSMContext):
    kb = await generate_slots_kb()
    await state.set_state(FSMClient.slot_name)
    user_id = event.from_user.id
    await bot.send_message(user_id,
                           "üëë –•–æ—á–µ—à—å –ø—Ä–∏–º–µ—Ä–∏—Ç—å –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–∑—ã?\n\n"
                           "–ö–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ –ø–µ—Ä–µ–≤–æ–ø–ª–æ—â–µ–Ω–∏–µ = –Ω–æ–≤—ã–π –±–æ–Ω—É—Å!\n\n"
                           "üëá –í—ã–±–µ—Ä–∏ —Å–ª–æ—Ç"
                           , reply_markup=kb)
    btn = await create_rega_btn(user_id, text="–ë–û–ù–£–° +200%")
    kb = InlineKeyboardMarkup(inline_keyboard=[[btn]])
    asyncio.create_task(send_delayed_message(
        user_id,
        delay=3,
        message_text="üí¨ <b>–ò –∫—Å—Ç–∞—Ç–∏, –ø–æ–∫–∞ —Ç—ã –∑–¥–µ—Å—å, —Å–ø–µ—à—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–≤–µ—Ç–æ–º..</b>\n\n"
                     "üé∞ <b>–ö–∞–∑–∏–Ω–æ SLOTTICA, –∫—Ä–æ–º–µ —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤, –î–ê–†–ò–¢ –í–°–ï–ú –ù–û–í–´–ú –ò–ì–†–û–ö–ê–ú +200% –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!</b>\n\n"
                     "‚ö°Ô∏è <i>–ù–µ –∑–∞–±—É–¥—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ–Ω—É—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</i>",
        kb=kb
    ))


async def send_delayed_message(user_id, delay, message_text, kb):
    await asyncio.sleep(delay)
    await bot.send_message(chat_id=user_id,
                           text=message_text,
                           parse_mode="HTML",
                           reply_markup=kb
                           )
